name: Build & Publish AmneziaWG Packages

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      gl_version:
        description: 'GL.iNet version AmneziaWG'
        required: false
        type: string
      force_rebuild:
        description: 'Force rebuild even if packages exist'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

env:
  owr_branch: "openwrt-24.10"
  owr_commit: "b546f80a3f"
  gl_version: ${{ inputs.gl_version || '4.7.5' }}
  gl_vermagic: "f2c63d42896f12da2b55f2c2b626e7be"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout Configs
        uses: actions/checkout@v4
        with:
          path: gl

      - name: Checkout AmneziaWG Source
        uses: actions/checkout@v4
        with:
          path: awg
          repository: amnezia-vpn/amneziawg-openwrt

      - name: Checkout OpenWRT
        uses: actions/checkout@v4
        with:
          path: owrt
          repository: openwrt/openwrt
          ref: ${{ env.owr_branch }}
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev gawk git subversion \
            libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools \
            python3-yaml

      - name: Validate Configuration File
        run: |
          CONFIG_FILE="gl/config_${{ env.gl_version }}.buildinfo"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "‚ùå Missing configuration: $CONFIG_FILE"
            echo "Available configs:"
            ls -la gl/config_*.buildinfo || echo "No config files found"
            exit 1
          fi
          echo "‚úÖ Using $CONFIG_FILE"

      - name: Apply AmneziaWG Debug Fix Patch
        run: |
          cd awg
          echo "üîç Exploring AmneziaWG project structure..."
          find . -name "*.h" -o -name "*.c" | head -20
          
          # –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–∞—Ç—á–∏–Ω–≥–∞
          COMPAT_FILES=$(find . -name "compat.h" -o -name "compat-*.h" 2>/dev/null || true)
          SOURCE_FILES=$(find . -name "*.c" -exec grep -l "pr_debug\|printk" {} \; 2>/dev/null | head -10 || true)
          
          echo "Found compat files: $COMPAT_FILES"
          echo "Found source files with debug calls: $SOURCE_FILES"
          
          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–∫—Å–∞ –æ—Ç–ª–∞–¥–∫–∏
          apply_debug_fix() {
            local file="$1"
            echo "üîß Applying debug fix to: $file"
            
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            cp "$file" "$file.bak"
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–∫—Å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
            cat > "$file.tmp" <<'EOF'
          /* AmneziaWG Debug Fix for OpenWRT 24.10 */
          #ifndef _AWG_DEBUG_FIX_APPLIED
          #define _AWG_DEBUG_FIX_APPLIED
          
          #include <linux/printk.h>
          
          /* Replace dynamic debug with no-op for compatibility */
          #ifdef pr_debug
          #undef pr_debug
          #endif
          #define pr_debug(fmt, ...) no_printk(KERN_DEBUG fmt, ##__VA_ARGS__)
          
          #ifdef dynamic_pr_debug
          #undef dynamic_pr_debug
          #endif
          #define dynamic_pr_debug(fmt, ...) no_printk(KERN_DEBUG fmt, ##__VA_ARGS__)
          
          #endif /* _AWG_DEBUG_FIX_APPLIED */
          
          EOF
            cat "$file" >> "$file.tmp"
            mv "$file.tmp" "$file"
            echo "‚úÖ Applied debug fix to: $file"
          }
          
          # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–∫—Å –∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–º compat —Ñ–∞–π–ª–∞–º
          if [ -n "$COMPAT_FILES" ]; then
            for file in $COMPAT_FILES; do
              apply_debug_fix "$file"
            done
          else
            echo "‚ö†Ô∏è No compat.h found, looking for main source files..."
            
            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
            MAIN_FILES=$(find . -name "*.h" -path "*/src/*" -o -name "*.h" -path "*/kernel/*" 2>/dev/null | head -5)
            if [ -n "$MAIN_FILES" ]; then
              for file in $MAIN_FILES; do
                if grep -q "linux/.*\.h\|#include" "$file" 2>/dev/null; then
                  apply_debug_fix "$file"
                  break
                fi
              done
            fi
          fi
          
          # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª —Ñ–∏–∫—Å–∞
          echo "üìù Creating universal debug fix header..."
          mkdir -p src/compat kernel/compat
          
          cat > debug-compat.h <<'EOF'
          #ifndef _AMNEZIAWG_DEBUG_COMPAT_H
          #define _AMNEZIAWG_DEBUG_COMPAT_H
          
          #include <linux/kernel.h>
          #include <linux/printk.h>
          
          /* OpenWRT 24.10 Compatibility Layer */
          #ifdef CONFIG_DYNAMIC_DEBUG
          /* If dynamic debug is enabled, try to use it safely */
          #ifndef KBUILD_MODNAME
          #define KBUILD_MODNAME "amneziawg"
          #endif
          
          #ifdef pr_debug
          #undef pr_debug
          #endif
          #define pr_debug(fmt, ...) \
              do { \
                  if (0) \
                      printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__); \
              } while (0)
          
          #else
          /* Fallback for systems without dynamic debug */
          #ifdef pr_debug
          #undef pr_debug
          #endif
          #define pr_debug(fmt, ...) no_printk(KERN_DEBUG fmt, ##__VA_ARGS__)
          #endif
          
          /* Additional symbol compatibility */
          #ifndef __dynamic_pr_debug
          #define __dynamic_pr_debug(fmt, ...) no_printk(fmt, ##__VA_ARGS__)
          #endif
          
          #endif /* _AMNEZIAWG_DEBUG_COMPAT_H */
          EOF
          
          # –ö–æ–ø–∏—Ä—É–µ–º –≤ —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞
          cp debug-compat.h src/compat/ 2>/dev/null || true
          cp debug-compat.h kernel/compat/ 2>/dev/null || true
          cp debug-compat.h . 2>/dev/null || true
          
          echo "‚úÖ Debug compatibility layer created"
          
          # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º Makefile –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ —Ñ–∏–∫—Å–∞
          for makefile in $(find . -name "Makefile" -o -name "*.mk" | head -5); do
            if grep -q "EXTRA_CFLAGS\|ccflags" "$makefile" 2>/dev/null; then
              echo "üîß Patching Makefile: $makefile"
              sed -i.bak '/EXTRA_CFLAGS\|ccflags/a\\nEXTRA_CFLAGS += -include $(src)/debug-compat.h -Dpr_debug=no_printk' "$makefile" || true
            fi
          done
          
          echo "‚úÖ AmneziaWG debug compatibility patches applied"

      - name: Prepare OpenWRT Build
        run: |
          cd owrt
          git reset --hard ${{ env.owr_commit }}
          mkdir -p package/awg
          cp -a ../awg/. package/awg/

          ./scripts/feeds update -a
          ./scripts/feeds install -a

          cp ../gl/config_${{ env.gl_version }}.buildinfo .config

          # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –æ—Ç–ª–∞–¥–∫–∏
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-amneziawg=m
          CONFIG_PACKAGE_amneziawg-tools=y
          CONFIG_PACKAGE_luci-proto-amneziawg=y
          CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m
          CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m
          CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m
          
          # Kernel debug configuration for symbol compatibility
          CONFIG_PRINTK=y
          CONFIG_PRINTK_TIME=y
          CONFIG_DYNAMIC_DEBUG=y
          CONFIG_SYMBOLIC_ERRNAME=y
          CONFIG_DEBUG_KERNEL=y
          CONFIG_DEBUG_INFO=y
          CONFIG_DEBUG_INFO_REDUCED=n
          CONFIG_DEBUG_INFO_SPLIT=n
          CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT=y
          
          # Ensure all required kernel symbols are exported
          CONFIG_KALLSYMS=y
          CONFIG_KALLSYMS_ALL=y
          CONFIG_MODVERSIONS=y
          CONFIG_MODULE_SRCVERSION_ALL=y
          EOF

          make defconfig

          # Override vermagic
          sed -i.bak '/\.vermagic/c\	echo "${{ env.gl_vermagic }}" > $(LINUX_DIR)/.vermagic' ./include/kernel-defaults.mk

      - name: Build Kernel and Toolchain
        run: |
          cd owrt
          make tools/install -j$(nproc)
          make toolchain/install -j$(nproc)
          make target/linux/{clean,compile} -i -j$(nproc) V=s

      - name: Verify Kernel Symbols
        run: |
          cd owrt
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–ª–∞–¥–∫–∏ –≤ —Å–æ–±—Ä–∞–Ω–Ω–æ–º —è–¥—Ä–µ
          KERNEL_BUILD_DIR=$(find build_dir/target-*/linux-*/linux-* -name "Module.symvers" | head -1 | xargs dirname)
          if [ -f "$KERNEL_BUILD_DIR/Module.symvers" ]; then
            echo "üîç Checking for debug symbols in kernel..."
            if grep -q "__dynamic_pr_debug\|printk\|no_printk" "$KERNEL_BUILD_DIR/Module.symvers"; then
              echo "‚úÖ Debug symbols found in kernel"
            else
              echo "‚ö†Ô∏è Debug symbols not found, but continuing..."
            fi
          fi

      - name: Build AmneziaWG Packages
        run: |
          cd owrt
          success=0
          total=0
          
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏
          export EXTRA_CFLAGS="-DCONFIG_DYNAMIC_DEBUG_CORE=1"
          
          for pkg in package/awg/*/; do
            [ -f "$pkg/Makefile" ] || continue
            pkgname=$(basename "$pkg")
            echo "üîß Building: $pkgname"
            
            # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            make package/awg/${pkgname}/clean V=s || true
            make package/awg/${pkgname}/download V=s || true
            make package/awg/${pkgname}/prepare V=s || true
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–±–æ—Ä–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
            if make package/awg/${pkgname}/compile V=s 2>&1 | tee /tmp/build_${pkgname}.log; then
              success=$((success+1))
              echo "‚úÖ Successfully built: $pkgname"
            else
              echo "‚ùå Failed to build: $pkgname"
              echo "Build log:"
              tail -50 /tmp/build_${pkgname}.log
              
              # –ü–æ–ø—ã—Ç–∫–∞ —Å–±–æ—Ä–∫–∏ –±–µ–∑ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
              echo "üîÑ Retrying without debug symbols..."
              export EXTRA_CFLAGS="-Dpr_debug=no_printk"
              if make package/awg/${pkgname}/compile V=s; then
                success=$((success+1))
                echo "‚úÖ Built with debug workaround: $pkgname"
              fi
            fi
            total=$((total+1))
          done
          
          echo "‚úÖ $success/$total packages built."
          [ "$success" -gt 0 ] || exit 1

      - name: Collect Built Packages
        run: |
          cd owrt
          mkdir -p ../artifacts
          packages_found=0
          
          for pattern in kmod-amneziawg amneziawg-tools luci-proto-amneziawg; do
            files=$(find bin/ -name "${pattern}*.ipk" 2>/dev/null || true)
            if [ -n "$files" ]; then
              echo "$files" | while read -r file; do
                [ -f "$file" ] || continue
                cp "$file" ../artifacts/
                echo "‚úÖ Copied: $(basename "$file")"
              done
              packages_found=$((packages_found + 1))
            else
              echo "‚ö†Ô∏è Pattern $pattern not found"
            fi
          done
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω
          actual_files=$(ls -1 ../artifacts/*.ipk 2>/dev/null | wc -l)
          if [ "$actual_files" -eq 0 ]; then
            echo "‚ùå No packages found to collect"
            echo "Available files in bin/:"
            find bin/ -name "*.ipk" -ls || echo "No .ipk files found"
            exit 1
          fi
          echo "‚úÖ Collected $actual_files package(s)"

      - name: Test Package Installation (Dry Run)
        run: |
          cd artifacts
          echo "üß™ Testing packages for common issues..."
          for pkg in *.ipk; do
            [ -f "$pkg" ] || continue
            echo "Testing: $pkg"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–∫–µ—Ç–∞
            if command -v ar >/dev/null 2>&1; then
              ar t "$pkg" 2>/dev/null || echo "‚ö†Ô∏è Package structure issue: $pkg"
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞
            size=$(stat -c%s "$pkg" 2>/dev/null || echo "0")
            if [ "$size" -lt 1000 ]; then
              echo "‚ö†Ô∏è Suspiciously small package: $pkg ($size bytes)"
            else
              echo "‚úÖ Package size OK: $pkg ($size bytes)"
            fi
          done

      - name: Extract kernel info
        id: kinfo
        run: |
          cd owrt
          # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
          VERMAGIC_FILE=""
          for i in {1..30}; do
            VERMAGIC_FILE=$(find build_dir/target-*/linux-*/linux-*/.vermagic 2>/dev/null | head -n1)
            [ -n "$VERMAGIC_FILE" ] && [ -f "$VERMAGIC_FILE" ] && break
            echo "Waiting for .vermagic file... ($i/30)"
            sleep 2
          done
          
          if [ ! -f "$VERMAGIC_FILE" ]; then
            echo "‚ùå .vermagic not found after 60s timeout"
            echo "Searching for .vermagic files:"
            find build_dir/ -name ".vermagic" -ls 2>/dev/null || echo "No .vermagic files found"
            exit 1
          fi

          # –°—á–∏—Ç—ã–≤–∞–µ–º VERMAGIC
          VERMAGIC_CONTENT=$(cat "$VERMAGIC_FILE")
          echo "vermagic=$VERMAGIC_CONTENT" >> "$GITHUB_OUTPUT"

          # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —è–¥—Ä–∞ —á–µ—Ä–µ–∑ make kernelversion
          KERNEL_DIR=$(dirname "$VERMAGIC_FILE")
          if [ -d "$KERNEL_DIR" ]; then
            KERNEL_VERSION=$(make -s -C "$KERNEL_DIR" kernelversion 2>/dev/null || echo "unknown")
          else
            KERNEL_VERSION="unknown"
          fi
          echo "kernel_version=$KERNEL_VERSION" >> "$GITHUB_OUTPUT"
          
          echo "‚úÖ Kernel: $KERNEL_VERSION, VERMAGIC: $VERMAGIC_CONTENT"

      - name: Create release notes
        run: |
          cat > release_notes.md <<EOF
          # AmneziaWG GL.iNet v${{ env.gl_version }}
          
          Built from OpenWRT ${{ env.owr_branch }} (commit: ${{ env.owr_commit }})
          
          ## Kernel Information
          ‚Ä¢ **Version**: ${{ steps.kinfo.outputs.kernel_version }}
          ‚Ä¢ **VERMAGIC**: ${{ steps.kinfo.outputs.vermagic }}
          
          ## Fixes Applied
          ‚Ä¢ Fixed \`__dynamic_pr_debug\` symbol compatibility issue for OpenWRT 24.10
          ‚Ä¢ Enhanced kernel debug configuration
          ‚Ä¢ Added fallback compilation without debug symbols
          
          ## Package Contents
          EOF
          
          if [ -d artifacts ] && [ "$(ls -A artifacts/ 2>/dev/null)" ]; then
            for f in artifacts/*.ipk; do
              [ -f "$f" ] || continue
              name=$(basename "$f")
              size=$(stat -c%s "$f" 2>/dev/null || echo "unknown")
              echo "‚Ä¢ \`$name\` ($size bytes)" >> release_notes.md
            done
          else
            echo "‚ö†Ô∏è No packages found in artifacts/" >> release_notes.md
          fi
          
          cat >> release_notes.md <<EOF
          
          ## Installation Notes
          If you encounter \`Unknown symbol\` errors during installation:
          1. Ensure your kernel has \`CONFIG_DYNAMIC_DEBUG=y\`
          2. Try \`opkg install --force-depends\` if dependencies are missing
          3. Check kernel version compatibility with \`uname -r\`
          EOF
          
          echo ""
          echo "Generated release notes:"
          cat release_notes.md

      - name: Upload Packages as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: amneziawg-packages-${{ env.gl_version }}
          path: artifacts/*.ipk

      - name: Auto-Publish Release
        if: startsWith(github.ref, 'refs/tags/') && hashFiles('artifacts/*.ipk') != ''
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*.ipk
          body_path: release_notes.md
          fail_on_unmatched_files: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

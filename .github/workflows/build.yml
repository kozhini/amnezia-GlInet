name: Build & Publish AmneziaWG Packages

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      gl_version:
        description: 'GL.iNet version AmneziaWG'
        required: false
        type: string
      force_rebuild:
        description: 'Force rebuild even if packages exist'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

env:
  owr_branch: "openwrt-24.10"
  owr_commit: "a878dd24e7985ab87420df3e2551c99ba794838a"
  gl_version: ${{ inputs.gl_version || 'mt6000_4.8.0' }}
  gl_vermagic: "xxxxxxxxxxxxxxxxxxxxxx"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout Configs
        uses: actions/checkout@v4
        with:
          path: gl

      - name: Checkout AmneziaWG Source
        uses: actions/checkout@v4
        with:
          path: awg
          repository: amnezia-vpn/amneziawg-openwrt

      - name: Checkout OpenWRT
        uses: actions/checkout@v4
        with:
          path: owrt
          repository: openwrt/openwrt
          ref: ${{ env.owr_branch }}
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev gawk git subversion \
            libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools \
            python3-yaml

      - name: Validate Configuration File
        run: |
          CONFIG_FILE="gl/config_${{ env.gl_version }}.buildinfo"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ Missing configuration: $CONFIG_FILE"
            echo "Available configs:"
            ls -la gl/config_*.buildinfo || echo "No config files found"
            exit 1
          fi
          echo "✅ Using $CONFIG_FILE"

      - name: Prepare OpenWRT Build
        run: |
          cd owrt
          git reset --hard ${{ env.owr_commit }}
          mkdir -p package/awg
          cp -a ../awg/. package/awg/

          ./scripts/feeds update -a
          ./scripts/feeds install -a

          cp ../gl/config_${{ env.gl_version }}.buildinfo .config

          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-amneziawg=m
          CONFIG_PACKAGE_amneziawg-tools=y
          CONFIG_PACKAGE_luci-proto-amneziawg=y
          CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m
          CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m
          CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m
          EOF

          make defconfig

          # Override vermagic
          sed -i.bak '/\.vermagic/c\	echo "${{ env.gl_vermagic }}" > $(LINUX_DIR)/.vermagic' ./include/kernel-defaults.mk

      - name: Build Kernel and Toolchain
        run: |
          cd owrt
          make tools/install -j$(nproc)
          make toolchain/install -j$(nproc)
          make target/linux/{clean,compile} -i -j$(nproc) V=s

      - name: Build AmneziaWG Packages
        run: |
          cd owrt
          success=0
          total=0
          for pkg in package/awg/*/; do
            [ -f "$pkg/Makefile" ] || continue
            pkgname=$(basename "$pkg")
            echo "🔧 Building: $pkgname"
            make package/awg/${pkgname}/clean V=s || true
            make package/awg/${pkgname}/download V=s || true
            make package/awg/${pkgname}/prepare V=s || true
            make package/awg/${pkgname}/compile V=s && success=$((success+1))
            total=$((total+1))
          done
          echo "✅ $success/$total packages built."
          [ "$success" -gt 0 ] || exit 1

      - name: Collect Built Packages
        run: |
          cd owrt
          mkdir -p ../artifacts
          packages_found=0
          
          for pattern in kmod-amneziawg amneziawg-tools luci-proto-amneziawg; do
            files=$(find bin/ -name "${pattern}*.ipk" 2>/dev/null || true)
            if [ -n "$files" ]; then
              echo "$files" | while read -r file; do
                [ -f "$file" ] || continue
                cp "$file" ../artifacts/
                echo "✅ Copied: $(basename "$file")"
              done
              packages_found=$((packages_found + 1))
            else
              echo "⚠️ Pattern $pattern not found"
            fi
          done
          
          # Проверяем что хотя бы один файл скопирован
          actual_files=$(ls -1 ../artifacts/*.ipk 2>/dev/null | wc -l)
          if [ "$actual_files" -eq 0 ]; then
            echo "❌ No packages found to collect"
            echo "Available files in bin/:"
            find bin/ -name "*.ipk" -ls || echo "No .ipk files found"
            exit 1
          fi
          echo "✅ Collected $actual_files package(s)"

      - name: Extract kernel info
        id: kinfo
        run: |
          cd owrt
          # Добавляем таймаут ожидания файла
          VERMAGIC_FILE=""
          for i in {1..30}; do
            VERMAGIC_FILE=$(find build_dir/target-*/linux-*/linux-*/.vermagic 2>/dev/null | head -n1)
            [ -n "$VERMAGIC_FILE" ] && [ -f "$VERMAGIC_FILE" ] && break
            echo "Waiting for .vermagic file... ($i/30)"
            sleep 2
          done
          
          if [ ! -f "$VERMAGIC_FILE" ]; then
            echo "❌ .vermagic not found after 60s timeout"
            echo "Searching for .vermagic files:"
            find build_dir/ -name ".vermagic" -ls 2>/dev/null || echo "No .vermagic files found"
            exit 1
          fi

          # Считываем VERMAGIC
          VERMAGIC_CONTENT=$(cat "$VERMAGIC_FILE")
          echo "vermagic=$VERMAGIC_CONTENT" >> "$GITHUB_OUTPUT"

          # Получаем версию ядра через make kernelversion
          KERNEL_DIR=$(dirname "$VERMAGIC_FILE")
          if [ -d "$KERNEL_DIR" ]; then
            KERNEL_VERSION=$(make -s -C "$KERNEL_DIR" kernelversion 2>/dev/null || echo "unknown")
          else
            KERNEL_VERSION="unknown"
          fi
          echo "kernel_version=$KERNEL_VERSION" >> "$GITHUB_OUTPUT"
          
          echo "✅ Kernel: $KERNEL_VERSION, VERMAGIC: $VERMAGIC_CONTENT"

      - name: Create release notes
        run: |
          cat > release_notes.md <<EOF
          # AmneziaWG GL.iNet v${{ env.gl_version }}
          
          Built from OpenWRT ${{ env.owr_branch }} (commit: ${{ env.owr_commit }})
          
          ## Kernel Information
          • **Version**: ${{ steps.kinfo.outputs.kernel_version }}
          • **VERMAGIC**: ${{ steps.kinfo.outputs.vermagic }}
          
          ## Package Contents
          EOF
          
          if [ -d artifacts ] && [ "$(ls -A artifacts/ 2>/dev/null)" ]; then
            for f in artifacts/*.ipk; do
              [ -f "$f" ] || continue
              name=$(basename "$f")
              size=$(stat -c%s "$f" 2>/dev/null || echo "unknown")
              echo "• \`$name\` ($size bytes)" >> release_notes.md
            done
          else
            echo "⚠️ No packages found in artifacts/" >> release_notes.md
          fi
          
          echo ""
          echo "Generated release notes:"
          cat release_notes.md

      - name: Upload Packages as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: amneziawg-packages-${{ env.gl_version }}
          path: artifacts/*.ipk

      - name: Auto-Publish Release
        if: startsWith(github.ref, 'refs/tags/') && hashFiles('artifacts/*.ipk') != ''
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*.ipk
          body_path: release_notes.md
          fail_on_unmatched_files: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Build & Release AmneziaWG packages

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      gl_version:
        description: 'GL.iNet version override'
        required: false
        type: string
      force_rebuild:
        description: 'Force rebuild even if packages exist'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

env:
  owr_branch: "openwrt-24.10"
  owr_commit: "6dacba30a7"
  gl_version: ${{ inputs.gl_version || '4.7.5' }}
  gl_vermagic: "9469a6c8c449c47e503c05678ea1559d"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout configs
        uses: actions/checkout@v4
        with:
          path: gl

      - name: Checkout AmneziaWG source
        uses: actions/checkout@v4
        with:
          path: awg
          repository: amnezia-vpn/amneziawg-openwrt

      - name: Checkout OpenWRT
        uses: actions/checkout@v4
        with:
          path: owrt
          repository: openwrt/openwrt
          ref: ${{ env.owr_branch }}
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev gawk git subversion libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools python3-yaml

      - name: Validate configuration
        run: |
          CONFIG_FILE="gl/config_${{ env.gl_version }}.buildinfo"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ Missing config: $CONFIG_FILE"
            ls -la gl/config_*.buildinfo || echo "No configs found"
            exit 1
          fi
          echo "✅ Config found: $CONFIG_FILE"

      - name: Prepare OpenWRT tree
        run: |
          cd owrt
          git reset --hard ${{ env.owr_commit }}
          mkdir -p package/awg
          cp -a ../awg/. package/awg/
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          cp ../gl/config_${{ env.gl_version }}.buildinfo .config
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-amneziawg=m
          CONFIG_PACKAGE_amneziawg-tools=y
          CONFIG_PACKAGE_luci-proto-amneziawg=y
          EOF
          make defconfig

      - name: Override VERMAGIC
        run: |
          cd owrt/include
          sed -i.bak '/\.vermagic/c\	echo "${{ env.gl_vermagic }}" > $(LINUX_DIR)/.vermagic' kernel-defaults.mk
          echo "✅ VERMAGIC overridden"

      - name: Build kernel
        run: |
          cd owrt
          make tools/install -j$(nproc)
          make toolchain/install -j$(nproc)
          make target/linux/{clean,compile} -i -j$(nproc) V=s
          VERMAGIC_FILE=$(find ./build_dir/target-*/linux-*/linux-*/.vermagic 2>/dev/null | head -n1)
          if [[ -f "$VERMAGIC_FILE" ]]; then
            read actual < "$VERMAGIC_FILE"
            [[ "$actual" == "${{ env.gl_vermagic }}" ]] && echo "✅ VERMAGIC OK" || { echo "❌ VERMAGIC mismatch: $actual"; exit 1; }
          else
            echo "❌ VERMAGIC file not found"; exit 1;
          fi

      - name: Build AmneziaWG packages
        run: |
          cd owrt
          success=0
          for dir in package/awg/*; do
            [[ -f "$dir/Makefile" ]] || continue
            pkg=$(basename "$dir")
            echo "🔧 Building: $pkg"
            make "package/awg/$pkg/{clean,download,prepare,compile}" V=s || echo "⚠️ $pkg failed to build"
            [[ -f $(find bin/ -name "${pkg}_*.ipk" | head -n1) ]] && success=$((success + 1))
          done
          echo "✅ Total built: $success"
          [[ $success -eq 0 ]] && exit 1

      - name: Collect packages
        run: |
          mkdir -p release
          cd owrt
          for pattern in "*amnezia*.ipk" "*awg*.ipk"; do
            find bin/ -name "$pattern" -exec cp -v {} ../release/ \;
          done

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: amneziawg-ipks
          path: release/*.ipk

      - name: Publish GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          files: release/*.ipk

name: Build & Publish AmneziaWG Packages

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      gl_version:
        description: 'GL.iNet version override'
        required: false
        type: string
      force_rebuild:
        description: 'Force rebuild even if packages exist'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

env:
  owr_branch: "openwrt-24.10"
  owr_commit: "b546f80a3f"
  gl_version: ${{ inputs.gl_version || '4.7.5' }}
  gl_vermagic: "9469a6c8c449c47e503c05678ea1559d"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout Configs
        uses: actions/checkout@v4
        with:
          path: gl

      - name: Checkout AmneziaWG Source
        uses: actions/checkout@v4
        with:
          path: awg
          repository: amnezia-vpn/amneziawg-openwrt

      - name: Checkout OpenWRT
        uses: actions/checkout@v4
        with:
          path: owrt
          repository: openwrt/openwrt
          ref: ${{ env.owr_branch }}
          fetch-depth: 0

      # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt
          key: apt-cache-${{ runner.os }}-${{ hashFiles('**/apt-requirements.txt') }}
          restore-keys: |
            apt-cache-${{ runner.os }}-

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev gawk git subversion \
            libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools \
            python3-yaml

      # –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ OpenWRT
      - name: Cache OpenWRT downloads
        uses: actions/cache@v4
        with:
          path: owrt/dl
          key: openwrt-dl-${{ env.owr_branch }}-${{ env.owr_commit }}-${{ hashFiles('owrt/feeds.conf.default') }}
          restore-keys: |
            openwrt-dl-${{ env.owr_branch }}-${{ env.owr_commit }}-
            openwrt-dl-${{ env.owr_branch }}-
            openwrt-dl-

      - name: Cache OpenWRT feeds
        uses: actions/cache@v4
        with:
          path: |
            owrt/feeds
            owrt/package/feeds
          key: openwrt-feeds-${{ env.owr_branch }}-${{ env.owr_commit }}-${{ hashFiles('owrt/feeds.conf.default') }}
          restore-keys: |
            openwrt-feeds-${{ env.owr_branch }}-${{ env.owr_commit }}-
            openwrt-feeds-${{ env.owr_branch }}-

      - name: Cache OpenWRT staging
        uses: actions/cache@v4
        with:
          path: owrt/staging_dir
          key: openwrt-staging-${{ env.owr_branch }}-${{ env.owr_commit }}-${{ env.gl_version }}-${{ hashFiles('gl/config_*.buildinfo') }}
          restore-keys: |
            openwrt-staging-${{ env.owr_branch }}-${{ env.owr_commit }}-${{ env.gl_version }}-
            openwrt-staging-${{ env.owr_branch }}-${{ env.owr_commit }}-
            openwrt-staging-${{ env.owr_branch }}-

      - name: Cache OpenWRT toolchain
        uses: actions/cache@v4
        with:
          path: |
            owrt/build_dir/toolchain-*
            owrt/build_dir/host
          key: openwrt-toolchain-${{ env.owr_branch }}-${{ env.owr_commit }}-${{ env.gl_version }}-${{ hashFiles('gl/config_*.buildinfo') }}
          restore-keys: |
            openwrt-toolchain-${{ env.owr_branch }}-${{ env.owr_commit }}-${{ env.gl_version }}-
            openwrt-toolchain-${{ env.owr_branch }}-${{ env.owr_commit }}-
            openwrt-toolchain-${{ env.owr_branch }}-

      # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
      - name: Cache OpenWRT build artifacts
        uses: actions/cache@v4
        with:
          path: |
            owrt/build_dir/target-*
            owrt/tmp
          key: openwrt-build-${{ env.owr_branch }}-${{ env.owr_commit }}-${{ env.gl_version }}-${{ env.gl_vermagic }}-${{ hashFiles('gl/config_*.buildinfo', 'awg/**') }}
          restore-keys: |
            openwrt-build-${{ env.owr_branch }}-${{ env.owr_commit }}-${{ env.gl_version }}-${{ env.gl_vermagic }}-
            openwrt-build-${{ env.owr_branch }}-${{ env.owr_commit }}-${{ env.gl_version }}-
            openwrt-build-${{ env.owr_branch }}-${{ env.owr_commit }}-

      - name: Validate Configuration File
        run: |
          CONFIG_FILE="gl/config_${{ env.gl_version }}.buildinfo"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "‚ùå Missing configuration: $CONFIG_FILE"
            echo "Available configs:"
            ls -la gl/config_*.buildinfo || echo "No config files found"
            exit 1
          fi
          echo "‚úÖ Using $CONFIG_FILE"

      - name: Prepare OpenWRT Build
        run: |
          cd owrt
          git reset --hard ${{ env.owr_commit }}
          
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
          mkdir -p dl package/awg feeds staging_dir build_dir tmp
          
          # –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ AmneziaWG
          cp -a ../awg/. package/awg/

          # –û–±–Ω–æ–≤–ª—è–µ–º feeds —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω
          if [ ! -d "feeds/packages" ] || [ ! -d "feeds/luci" ]; then
            echo "üîÑ Updating feeds (cache miss)"
            ./scripts/feeds update -a
            ./scripts/feeds install -a
          else
            echo "‚úÖ Using cached feeds"
            ./scripts/feeds install -a
          fi

          # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
          cp ../gl/config_${{ env.gl_version }}.buildinfo .config

          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-amneziawg=m
          CONFIG_PACKAGE_amneziawg-tools=m
          CONFIG_PACKAGE_luci-proto-amneziawg=m
          EOF

          make defconfig

          # Override vermagic
          sed -i.bak '/\.vermagic/c\	echo "${{ env.gl_vermagic }}" > $(LINUX_DIR)/.vermagic' ./include/kernel-defaults.mk

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞
      - name: Check build cache status
        run: |
          cd owrt
          echo "üìä Build cache status:"
          echo "‚Ä¢ Downloads: $(du -sh dl 2>/dev/null || echo '0B')"
          echo "‚Ä¢ Feeds: $(du -sh feeds 2>/dev/null || echo '0B')"
          echo "‚Ä¢ Staging: $(du -sh staging_dir 2>/dev/null || echo '0B')"
          echo "‚Ä¢ Toolchain: $(du -sh build_dir/toolchain-* 2>/dev/null || echo '0B')"
          echo "‚Ä¢ Build artifacts: $(du -sh build_dir/target-* 2>/dev/null || echo '0B')"

      - name: Build Kernel and Toolchain
        run: |
          cd owrt
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–π toolchain
          if [ -f "staging_dir/toolchain-*/bin/mips-openwrt-linux-musl-gcc" ] || \
             [ -f "staging_dir/toolchain-*/bin/aarch64-openwrt-linux-musl-gcc" ] || \
             [ -f "staging_dir/toolchain-*/bin/arm-openwrt-linux-muslgnueabi-gcc" ]; then
            echo "‚úÖ Using cached toolchain"
          else
            echo "üîß Building toolchain (cache miss)"
            make tools/install -j$(nproc)
            make toolchain/install -j$(nproc)
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è–¥—Ä–∞
          if [ -d "build_dir/target-*/linux-*" ] && [ -f "build_dir/target-*/linux-*/.vermagic" ]; then
            echo "‚úÖ Using cached kernel build"
          else
            echo "üîß Building kernel (cache miss)"
            make target/linux/{clean,compile} -i -j$(nproc) V=s
          fi

      - name: Build AmneziaWG Packages
        run: |
          cd owrt
          success=0
          total=0
          
          # –§–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É —Ç–æ–ª—å–∫–æ AmneziaWG –ø–∞–∫–µ—Ç–æ–≤
          if [ "${{ inputs.force_rebuild }}" = "true" ]; then
            echo "üîÑ Force rebuild requested"
            make package/awg/{clean,download,prepare} V=s || true
          fi
          
          for pkg in package/awg/*/; do
            [ -f "$pkg/Makefile" ] || continue
            pkgname=$(basename "$pkg")
            echo "üîß Building: $pkgname"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
            if find bin/ -name "$pkgname*.ipk" -newer "$pkg/Makefile" 2>/dev/null | grep -q .; then
              echo "‚úÖ Using cached package: $pkgname"
              success=$((success+1))
            else
              echo "üîß Building package: $pkgname (cache miss or outdated)"
              make package/awg/${pkgname}/clean V=s || true
              make package/awg/${pkgname}/download V=s || true
              make package/awg/${pkgname}/prepare V=s || true
              if make package/awg/${pkgname}/compile V=s; then
                success=$((success+1))
              fi
            fi
            total=$((total+1))
          done
          
          echo "‚úÖ $success/$total packages built/cached."
          [ "$success" -gt 0 ] || exit 1

      - name: Collect Built Packages
        run: |
          cd owrt
          mkdir -p ../artifacts
          packages_found=0
          
          for pattern in kmod-amneziawg amneziawg-tools luci-proto-amneziawg; do
            files=$(find bin/ -name "${pattern}*.ipk" 2>/dev/null || true)
            if [ -n "$files" ]; then
              echo "$files" | while read -r file; do
                [ -f "$file" ] || continue
                cp "$file" ../artifacts/
                echo "‚úÖ Copied: $(basename "$file")"
                packages_found=$((packages_found + 1))
              done
            else
              echo "‚ö†Ô∏è Pattern $pattern not found"
            fi
          done
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
          if [ -z "$(ls -A ../artifacts/ 2>/dev/null)" ]; then
            echo "‚ùå No packages found to collect"
            echo "Available packages:"
            find bin/ -name "*.ipk" | head -20
            exit 1
          fi

      - name: Extract kernel info
        id: kinfo
        run: |
          cd owrt
          # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
          for i in {1..30}; do
            VERMAGIC_FILE=$(find build_dir/target-*/linux-*/linux-*/.vermagic 2>/dev/null | head -n1)
            [ -n "$VERMAGIC_FILE" ] && [ -f "$VERMAGIC_FILE" ] && break
            echo "Waiting for .vermagic file... ($i/30)"
            sleep 2
          done
          
          if [ ! -f "$VERMAGIC_FILE" ]; then
            echo "‚ùå .vermagic not found after 60s timeout"
            find build_dir/ -name ".vermagic" -ls 2>/dev/null || true
            exit 1
          fi

          # –°—á–∏—Ç—ã–≤–∞–µ–º VERMAGIC
          echo "vermagic=$(cat "$VERMAGIC_FILE")" >> "$GITHUB_OUTPUT"

          # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —è–¥—Ä–∞
          KERNEL_DIR=$(dirname "$VERMAGIC_FILE")
          KERNEL_VERSION=$(make -s -C "$KERNEL_DIR" kernelversion 2>/dev/null || echo "unknown")
          echo "kernel_version=$KERNEL_VERSION" >> "$GITHUB_OUTPUT"

      - name: Create release notes
        run: |
          cat > release_notes.md <<EOF
          # AmneziaWG GL.iNet v${{ env.gl_version }}
          
          Built from OpenWRT ${{ env.owr_branch }} (commit: ${{ env.owr_commit }})
          
          ## Kernel Information
          ‚Ä¢ **Version**: ${{ steps.kinfo.outputs.kernel_version }}
          ‚Ä¢ **VERMAGIC**: ${{ steps.kinfo.outputs.vermagic }}
          
          ## Package Contents
          EOF
          
          if [ -d artifacts ] && [ "$(ls -A artifacts/)" ]; then
            for f in artifacts/*.ipk; do
              [ -f "$f" ] || continue
              name=$(basename "$f")
              size=$(stat -c%s "$f" 2>/dev/null || echo "unknown")
              echo "‚Ä¢ \`$name\` ($size bytes)" >> release_notes.md
            done
          else
            echo "‚ö†Ô∏è No packages found in artifacts/" >> release_notes.md
          fi

      - name: Upload Packages as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: amneziawg-packages-${{ env.gl_version }}
          path: artifacts/*.ipk

      - name: Auto-Publish Release
        if: startsWith(github.ref, 'refs/tags/') && hashFiles('artifacts/*.ipk') != ''
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*.ipk
          body_path: release_notes.md
          fail_on_unmatched_files: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –≤ –∫–æ–Ω—Ü–µ
      - name: Cache statistics
        if: always()
        run: |
          echo "üìä Final cache statistics:"
          echo "‚Ä¢ Total downloads: $(du -sh owrt/dl 2>/dev/null || echo '0B')"
          echo "‚Ä¢ Feeds size: $(du -sh owrt/feeds 2>/dev/null || echo '0B')"
          echo "‚Ä¢ Staging dir: $(du -sh owrt/staging_dir 2>/dev/null || echo '0B')"
          echo "‚Ä¢ Build artifacts: $(du -sh owrt/build_dir 2>/dev/null || echo '0B')"
          echo "‚Ä¢ Artifacts created: $(ls -la artifacts/ 2>/dev/null | wc -l) files"

name: Build AmneziaWG packages
on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      gl_version:
        description: 'GL.iNet version override'
        required: false
        type: string
      force_rebuild:
        description: 'Force rebuild even if packages exist'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

env:
  owr_branch: "openwrt-24.10"
  owr_commit: "6dacba30a7"
  gl_version: ${{ inputs.gl_version || '4.7.5' }}
  gl_vermagic: "9469a6c8c449c47e503c05678ea1559d"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    
    steps:
      - name: Checkout Configs
        uses: actions/checkout@v4
        with:
          path: gl

      - name: Checkout AmneziaWG
        uses: actions/checkout@v4
        with:
          path: awg
          repository: amnezia-vpn/amneziawg-openwrt
          
      - name: Checkout OpenWRT
        uses: actions/checkout@v4
        with:
          path: owrt
          repository: openwrt/openwrt
          ref: ${{ env.owr_branch }}
          fetch-depth: 0

      - name: Setup build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev gawk git subversion libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools python3-yaml

      - name: Validate configuration files
        run: |
          if [ ! -f "gl/config_${{ env.gl_version }}.buildinfo" ]; then
            echo "❌ Configuration file config_${{ env.gl_version }}.buildinfo not found!"
            echo "Available configs:"
            ls -la gl/config_*.buildinfo || echo "No config files found"
            exit 1
          fi
          echo "✅ Configuration file validated"

      - name: Build OpenWRT Kernel
        run: |
          cd owrt
          echo -e "\e[32m>>> Checkout revision\e[0m"
          git reset --hard ${{ env.owr_commit }}
          
          echo -e "\e[32m>>> Setting up AmneziaWG package\e[0m"
          mkdir -p ./package/awg
          cp -a ../awg/. ./package/awg/
          
          echo -e "\e[32m>>> Feed update...\e[0m"
          ./scripts/feeds update -a
          
          echo -e "\e[32m>>> Feed install\e[0m"
          ./scripts/feeds install -a
          
          echo -e "\e[32m>>> Configuring...\e[0m"
          cp ../gl/config_${{ env.gl_version }}.buildinfo .config
          
          # Add AmneziaWG packages to config
          cat >> .config << EOF
          CONFIG_PACKAGE_kmod-amneziawg=m
          CONFIG_PACKAGE_amneziawg-tools=m
          CONFIG_PACKAGE_luci-proto-amneziawg=m
          EOF
          
          make defconfig
          
          echo -e "\e[1m\e[31m>>> Override VERMAGIC!\e[0m"
          # More robust VERMAGIC override with backup
          cp ./include/kernel-defaults.mk ./include/kernel-defaults.mk.backup
          
          # Use a more targeted approach for VERMAGIC override
          if grep -q "\.vermagic" ./include/kernel-defaults.mk; then
            sed -i '/\.vermagic/c\	echo "${{ env.gl_vermagic }}" > $(LINUX_DIR)/.vermagic' ./include/kernel-defaults.mk
          else
            echo "❌ Could not find VERMAGIC section in kernel-defaults.mk"
            exit 1
          fi
          
          echo -e "\e[32m>>> Building tools...\e[0m"
          make tools/install -j$(nproc)
          
          echo -e "\e[32m>>> Building toolchain...\e[0m"
          make toolchain/install -j$(nproc)
          
          echo -e "\e[32m>>> Building kernel...\e[0m"
          make target/linux/{clean,compile} -i -j$(nproc) V=s
          
          # Verify VERMAGIC
          VERMAGIC_FILE=$(find ./build_dir/target-*/linux-*/linux-*/.vermagic 2>/dev/null | head -n1)
          if [ -f "$VERMAGIC_FILE" ]; then
            VERMAGIC=$(cat "$VERMAGIC_FILE")
            VERMAGIC_EXPECTED=${{ env.gl_vermagic }}
            if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
              echo "❌ VERMAGIC mismatch: got '$VERMAGIC', expected '$VERMAGIC_EXPECTED'"
              exit 1
            fi
            echo "✅ VERMAGIC verified: $VERMAGIC"
          else
            echo "⚠️ Warning: Could not find VERMAGIC file for verification"
          fi

      - name: Check AmneziaWG package structure
        run: |
          cd owrt
          echo -e "\e[32m>>> Checking AmneziaWG package structure...\e[0m"
          
          if [ -d "package/awg" ]; then
            echo "✅ AmneziaWG package directory exists"
            ls -la package/awg/
            
            # Check for Makefile or package definitions
            find package/awg -name "Makefile" -o -name "*.mk" | head -10
            
            # Check what packages are actually available
            echo "=== Package definitions found ==="
            find package/awg -name "*" -type d | grep -v "^\.$" | head -10
            
          else
            echo "❌ AmneziaWG package directory not found!"
            exit 1
          fi

      - name: Build AmneziaWG packages
        run: |
          cd owrt
          
          # First, let's see what packages are available to build
          echo -e "\e[32m>>> Checking available AmneziaWG packages...\e[0m"
          make package/awg/index V=s || true
          
          # Try to build packages with better error handling
          build_package() {
            local pkg_path="$1"
            local pkg_name=$(basename "$pkg_path")
            
            echo -e "\e[32m>>> Building $pkg_name...\e[0m"
            
            # Check if package exists
            if [ ! -d "$pkg_path" ]; then
              echo "❌ Package directory $pkg_path not found!"
              return 1
            fi
            
            # Clean, download, prepare
            echo "Cleaning $pkg_name..."
            make $pkg_path/{clean,download,prepare} V=s || {
              echo "❌ Failed to prepare $pkg_name"
              return 1
            }
            
            # Compile
            echo "Compiling $pkg_name..."
            make $pkg_path/compile V=s || {
              echo "❌ Failed to compile $pkg_name"
              # Show compilation errors
              find logs/ -name "*$pkg_name*" -type f 2>/dev/null | head -3 | while read log; do
                echo "=== $log ==="
                tail -50 "$log"
              done
              return 1
            }
            
            echo "✅ Successfully built $pkg_name"
            return 0
          }
          
          # List available packages
          echo "Available packages in awg directory:"
          find package/awg -maxdepth 1 -type d | grep -v "^package/awg$" | sort
          
          # Try to build each package
          success_count=0
          total_count=0
          
          for pkg_dir in package/awg/*/; do
            if [ -d "$pkg_dir" ] && [ -f "$pkg_dir/Makefile" ]; then
              total_count=$((total_count + 1))
              pkg_name=$(basename "$pkg_dir")
              echo -e "\n\e[33m>>> Processing package: $pkg_name\e[0m"
              
              if build_package "package/awg/$pkg_name"; then
                success_count=$((success_count + 1))
              else
                echo "❌ Failed to build $pkg_name, continuing with others..."
              fi
            fi
          done
          
          echo -e "\n\e[32m>>> Build summary: $success_count/$total_count packages built successfully\e[0m"
          
          if [ $success_count -eq 0 ]; then
            echo "❌ No packages were built successfully!"
            exit 1
          fi

      - name: Debug build output
        run: |
          cd owrt
          echo -e "\e[32m>>> Analyzing build output...\e[0m"
          
          echo "=== Build directory structure ==="
          find . -name "*.ipk" -type f | head -20
          
          echo "=== All packages in bin/ ==="
          find bin/ -name "*.ipk" 2>/dev/null | head -20 || echo "No bin/ directory found"
          
          echo "=== Searching for any amnezia-related files ==="
          find . -name "*amnezia*" -o -name "*awg*" 2>/dev/null | head -20
          
          echo "=== Package compilation logs ==="
          find . -name "*.log" -path "*/awg/*" 2>/dev/null | head -10
          
          echo "=== Checking if packages were built ==="
          ls -la package/awg/ 2>/dev/null || echo "No package/awg directory"

      - name: Collect and verify packages
        run: |
          cd owrt
          echo -e "\e[32m>>> Collecting packages...\e[0m"
          mkdir -p awg
          
          # Function to find and copy package with comprehensive search
          find_and_copy_package() {
            local package_name="$1"
            local output_name="$2"
            
            echo "Looking for package: $package_name"
            
            # Comprehensive search in all possible locations
            local found_file=""
            
            # Search patterns for different package naming conventions
            local search_patterns=(
              "${package_name}_*.ipk"
              "${package_name}-*.ipk"
              "*${package_name}*.ipk"
            )
            
            # Search locations
            local search_locations=(
              "bin/packages/*/base"
              "bin/packages/*/packages"
              "bin/targets/*/packages"
              "bin/packages/*/*"
              "bin/targets/*/*"
              "staging_dir/packages/*/base"
              "build_dir/target-*/packages"
            )
            
            for pattern in "${search_patterns[@]}"; do
              for location in "${search_locations[@]}"; do
                found_file=$(find $location -name "$pattern" 2>/dev/null | head -n1)
                if [ -n "$found_file" ] && [ -f "$found_file" ]; then
                  echo "Found with pattern '$pattern' in '$location'"
                  break 2
                fi
              done
            done
            
            # If still not found, try global search
            if [ -z "$found_file" ]; then
              echo "Trying global search..."
              found_file=$(find . -name "*${package_name}*.ipk" 2>/dev/null | grep -v "build_dir.*\.ipk-" | head -n1)
            fi
            
            if [ -n "$found_file" ] && [ -f "$found_file" ]; then
              cp "$found_file" "awg/${output_name}_${{ env.gl_version }}.ipk"
              echo "✅ Copied: $found_file -> awg/${output_name}_${{ env.gl_version }}.ipk"
              
              # Verify file size
              local file_size=$(stat -c%s "awg/${output_name}_${{ env.gl_version }}.ipk")
              if [ "$file_size" -lt 1000 ]; then
                echo "⚠️ Warning: Package $output_name seems too small ($file_size bytes)"
              fi
              return 0
            else
              echo "❌ Package $package_name not found anywhere!"
              echo "Available packages containing 'amnezia' or 'awg':"
              find . -name "*.ipk" 2>/dev/null | grep -E "(amnezia|awg)" | head -10 || echo "No matching packages found"
              echo "All .ipk files:"
              find . -name "*.ipk" 2>/dev/null | head -20 || echo "No .ipk files found"
              return 1
            fi
          }
          
          # Try to find and copy packages
          success_count=0
          
          if find_and_copy_package "amneziawg-tools" "amneziawg-tools"; then
            ((success_count++))
          fi
          
          if find_and_copy_package "luci-proto-amneziawg" "luci-proto-amneziawg"; then
            ((success_count++))
          fi
          
          if find_and_copy_package "kmod-amneziawg" "kmod-amneziawg"; then
            ((success_count++))
          fi
          
          echo "Successfully found $success_count out of 3 packages"
          
          if [ $success_count -eq 0 ]; then
            echo "❌ No packages found! Build might have failed."
            echo "Checking for build errors..."
            find . -name "*.log" -exec grep -l -i "error\|failed" {} \; | head -5
            exit 1
          elif [ $success_count -lt 3 ]; then
            echo "⚠️ Only $success_count packages found, but continuing..."
          fi

      - name: Verify built packages
        run: |
          cd owrt
          echo -e "\e[32m>>> Verifying packages...\e[0m"
          
          # Show what was actually created
          echo "=== All .ipk files found ==="
          find . -name "*.ipk" -type f | head -20
          
          # Check our collected packages
          if [ -d "awg" ] && [ "$(ls -A awg 2>/dev/null)" ]; then
            echo "=== Collected packages ==="
            ls -la awg/
            
            declare -a found_packages=()
            for file in awg/*.ipk; do
              if [ -f "$file" ]; then
                file_size=$(stat -c%s "$file")
                pkg_name=$(basename "$file")
                echo "✅ $pkg_name: $file_size bytes"
                found_packages+=("$pkg_name")
                
                # Basic package validation
                if command -v opkg >/dev/null 2>&1; then
                  if opkg info "$file" >/dev/null 2>&1; then
                    echo "  📦 Package structure valid"
                  else
                    echo "  ⚠️ Package structure check failed"
                  fi
                fi
              fi
            done
            
            if [ ${#found_packages[@]} -eq 0 ]; then
              echo "❌ No packages found in awg directory!"
              exit 1
            fi
            
            echo "✅ Found ${#found_packages[@]} packages total"
          else
            echo "❌ No packages directory or no packages found!"
            exit 1
          fi

      - name: Generate release notes
        run: |
          cd owrt
          cat > awg/RELEASE_NOTES.md << EOF
          # AmneziaWG GL.iNet v${{ env.gl_version }}
          
          ## Build Information
          - **OpenWRT Branch**: ${{ env.owr_branch }}
          - **OpenWRT Commit**: ${{ env.owr_commit }}
          - **GL.iNet Version**: ${{ env.gl_version }}
          - **VERMAGIC**: ${{ env.gl_vermagic }}
          - **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Build Runner**: ${{ runner.os }}
          
          ## Included Packages
          EOF
          
          for pkg in awg/*.ipk; do
            if [ -f "$pkg" ]; then
              pkg_name=$(basename "$pkg")
              pkg_size=$(stat -c%s "$pkg")
              echo "- **$pkg_name** ($pkg_size bytes)" >> awg/RELEASE_NOTES.md
            fi
          done
          
          cat >> awg/RELEASE_NOTES.md << EOF
          
          ## Installation Instructions
          1. Upload the IPK files to your GL.iNet router
          2. Install using opkg:
             \`\`\`bash
             opkg install kmod-amneziawg_${{ env.gl_version }}.ipk
             opkg install amneziawg-tools_${{ env.gl_version }}.ipk
             opkg install luci-proto-amneziawg_${{ env.gl_version }}.ipk
             \`\`\`
          3. Reboot the router
          4. Configure AmneziaWG through LuCI interface
          
          ## Compatibility
          - GL.iNet devices with MediaTek Filogic chipset
          - OpenWrt ${{ env.owr_branch }} based firmware
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        with:
          name: "AmneziaWG GL.iNet v${{ env.gl_version }}"
          tag_name: ${{ github.ref_type == 'tag' && github.ref_name || format('v{0}-{1}', env.gl_version, github.run_number) }}
          body_path: owrt/awg/RELEASE_NOTES.md
          files: |
            owrt/awg/*.ipk
            owrt/awg/RELEASE_NOTES.md
          draft: false
          prerelease: ${{ github.event_name == 'workflow_dispatch' }}
          generate_release_notes: true
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: amneziawg-packages-${{ env.gl_version }}
          path: |
            owrt/awg/*.ipk
            owrt/awg/RELEASE_NOTES.md
            owrt/.config
          retention-days: 30

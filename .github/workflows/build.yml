name: Build & Publish AmneziaWG Packages

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      gl_version:
        description: 'GL.iNet version override'
        required: false
        type: string
      force_rebuild:
        description: 'Force rebuild even if packages exist'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

env:
  owr_branch: "openwrt-24.10"
  owr_commit: "b546f80a3f"
  gl_version: ${{ inputs.gl_version || '4.7.5' }}
  gl_vermagic: "9469a6c8c449c47e503c05678ea1559d"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout Configs
        uses: actions/checkout@v4
        with:
          path: gl

      - name: Checkout AmneziaWG Source
        uses: actions/checkout@v4
        with:
          path: awg
          repository: amnezia-vpn/amneziawg-openwrt

      - name: Checkout OpenWRT
        uses: actions/checkout@v4
        with:
          path: owrt
          repository: openwrt/openwrt
          ref: ${{ env.owr_branch }}
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev gawk git subversion \
            libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools \
            python3-yaml

      - name: Validate Configuration File
        run: |
          CONFIG_FILE="gl/config_${{ env.gl_version }}.buildinfo"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "‚ùå Missing configuration: $CONFIG_FILE"
            exit 1
          fi
          echo "‚úÖ Using $CONFIG_FILE"

      - name: Prepare OpenWRT Build
        run: |
          cd owrt
          git reset --hard ${{ env.owr_commit }}
          mkdir -p package/awg
          cp -a ../awg/. package/awg/

          ./scripts/feeds update -a
          ./scripts/feeds install -a

          cp ../gl/config_${{ env.gl_version }}.buildinfo .config

          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-amneziawg=m
          CONFIG_PACKAGE_amneziawg-tools=m
          CONFIG_PACKAGE_luci-proto-amneziawg=m
          EOF

          make defconfig

          # Override vermagic
          sed -i.bak '/\.vermagic/c\	echo "${{ env.gl_vermagic }}" > $(LINUX_DIR)/.vermagic' ./include/kernel-defaults.mk

      - name: Build Kernel and Toolchain
        run: |
          cd owrt
          make tools/install -j$(nproc)
          make toolchain/install -j$(nproc)
          make target/linux/{clean,compile} -i -j$(nproc) V=s

      - name: Build AmneziaWG Packages
        run: |
          cd owrt
          success=0
          total=0
          for pkg in package/awg/*/; do
            [ -f "$pkg/Makefile" ] || continue
            pkgname=$(basename "$pkg")
            echo "üîß Building: $pkgname"
            make package/awg/${pkgname}/clean V=s || true
            make package/awg/${pkgname}/download V=s || true
            make package/awg/${pkgname}/prepare V=s || true
            make package/awg/${pkgname}/compile V=s && success=$((success+1))
            total=$((total+1))
          done
          echo "‚úÖ $success/$total packages built."
          [ "$success" -gt 0 ] || exit 1

      - name: Collect Built Packages
        run: |
          cd owrt
          mkdir -p ../artifacts
          for pattern in kmod-amneziawg amneziawg-tools luci-proto-amneziawg; do
            found=$(find bin/ -name "$pattern*.ipk" | head -n 1)
            if [ -n "$found" ]; then
              cp "$found" ../artifacts/
              echo "‚úÖ Found and copied: $found"
            else
              echo "‚ö†Ô∏è Package $pattern not found"
            fi
          done
      - name: Extract kernel info
        id: kinfo        # <‚Äë‚Äë –Ω—É–∂–µ–Ω –¥–ª—è outputs
        run: |
          cd owrt
          # –ò—â–µ–º .vermagic, –ª–µ–∂–∏—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º —è–¥—Ä–æ–º
          VERMAGIC_FILE=$(find build_dir/target-*/linux-*/linux-*/.vermagic | head -n1)
          if [ ! -f "$VERMAGIC_FILE" ]; then
            echo "‚ùå .vermagic not found"; exit 1
          fi

          # –°—á–∏—Ç—ã–≤–∞–µ–º VERMAGIC
          echo "vermagic=$(cat "$VERMAGIC_FILE")" >> "$GITHUB_OUTPUT"

          # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —è–¥—Ä–∞ —á–µ—Ä–µ–∑ make kernelversion
          KERNEL_DIR=$(dirname "$VERMAGIC_FILE")
          KERNEL_VERSION=$(make -s -C "$KERNEL_DIR" kernelversion)
          echo "kernel_version=$KERNEL_VERSION" >> "$GITHUB_OUTPUT"

      - name: Create release notes
        run: |
          cat > release_notes.md <<EOF
          # AmneziaWG¬†GL.iNet¬†v${{ env.gl_version }}

          ## Kernel information
          ‚Ä¢ **Version**¬†:¬†${{ steps.kinfo.outputs.kernel_version }}
          ‚Ä¢ **VERMAGIC**:¬†${{ steps.kinfo.outputs.vermagic }}

          ## Included packages
          EOF

          for f in artifacts/*.ipk; do
            name=$(basename "$f")
            size=$(stat -c%s "$f")
            echo "‚Ä¢ $name¬†($size¬†bytes)" >> release_notes.md
          done

      - name: Upload Packages as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: amneziawg-packages-${{ env.gl_version }}
          path: artifacts/*.ipk

      - name: Auto-Publish Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*.ipk
          body_path: release_notes.md      # <‚Äë‚Äë —Ç–µ–ø–µ—Ä—å —è–≤–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

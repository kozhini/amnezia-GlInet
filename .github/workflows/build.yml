name: Build & Publish AmneziaWG Packages

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      gl_version:
        description: 'GL.iNet ImmortalWRT version AmneziaWG'
        required: false
        type: string
      force_rebuild:
        description: 'Force rebuild even if packages exist'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

env:
  owr_branch: "v24.10.2"
  owr_commit: "a878dd24e7"
  gl_version: ${{ inputs.gl_version || 'MT6000_4.8.0' }}
  gl_vermagic: "2ccac7a75355327cb6dfb4df1ecb575e"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout Configs
        uses: actions/checkout@v4
        with:
          path: gl

      - name: Checkout AmneziaWG Source
        uses: actions/checkout@v4
        with:
          path: awg
          repository: amnezia-vpn/amneziawg-openwrt

      - name: Checkout OpenWRT
        uses: actions/checkout@v4
        with:
          path: owrt
          repository: openwrt/openwrt
          ref: ${{ env.owr_branch }}
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev gawk git subversion \
            libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools \
            python3-yaml file bc

      - name: Validate Config File
        run: |
          CONFIG_FILE="gl/config_${{ env.gl_version }}.buildinfo"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "‚ùå Missing config: $CONFIG_FILE"
            echo "üìÅ Available configs:"
            ls -la gl/ | grep -E '\.(config|buildinfo)$' || echo "No config files found"
            exit 1
          fi
          echo "‚úÖ Using config: $CONFIG_FILE"
          echo "üìã Config size: $(wc -l < "$CONFIG_FILE") lines"

      - name: Prepare OpenWRT
        run: |
          cd owrt
          echo "üîÑ Resetting to commit: ${{ env.owr_commit }}"
          git reset --hard ${{ env.owr_commit }}
          
          echo "üì¶ Setting up AWG packages..."
          mkdir -p package/awg
          cp -a ../awg/{kmod-amneziawg,amneziawg-tools,luci-proto-amneziawg} package/awg/
          
          echo "üìã Copied packages:"
          ls -la package/awg/
          
          echo "üîÑ Updating feeds..."
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          echo "‚öôÔ∏è Applying configuration..."
          cp ../gl/config_${{ env.gl_version }}.buildinfo .config
          
          # Add AmneziaWG packages to config
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-amneziawg=m
          CONFIG_PACKAGE_amneziawg-tools=y
          CONFIG_PACKAGE_luci-proto-amneziawg=y
          EOF
          
          make defconfig
          
          echo "üîß Modifying vermagic..."
          sed -i.bak '/\.vermagic/c\	echo "${{ env.gl_vermagic }}" > $(LINUX_DIR)/.vermagic' ./include/kernel-defaults.mk

      - name: Check Package Manager Type
        run: |
          cd owrt
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞..."
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ APK
          if grep -q "CONFIG_USE_APK" .config 2>/dev/null; then
            echo "üì¶ –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ APK –ø–∞–∫–µ—Ç—ã"
            echo "package_format=apk" >> $GITHUB_ENV
            echo "PACKAGE_EXT=apk" >> $GITHUB_ENV
          else
            echo "üì¶ –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ IPK –ø–∞–∫–µ—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "package_format=ipk" >> $GITHUB_ENV
            echo "PACKAGE_EXT=ipk" >> $GITHUB_ENV
          fi
          
          echo "üîç –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:"
          echo "  üìã APK-related –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
          grep -iE "apk" .config | head -5 || echo "    –ù–µ—Ç APK –Ω–∞—Å—Ç—Ä–æ–µ–∫"
          
          echo "  üìã OPKG-related –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
          grep -iE "opkg" .config | head -5 || echo "    –ù–µ—Ç OPKG –Ω–∞—Å—Ç—Ä–æ–µ–∫"
          
          echo "  üìã Package manager –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
          grep -iE "(package.*manager|CONFIG_USE_)" .config | head -5 || echo "    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
          
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ OpenWRT –∏ –∫–æ–º–º–∏—Ç–∞:"
          echo "  üìÖ –í–µ—Ç–∫–∞: ${{ env.owr_branch }}"
          echo "  üîó –ö–æ–º–º–∏—Ç: ${{ env.owr_commit }}"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∫–æ–º–º–∏—Ç–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è, –∫–æ–≥–¥–∞ –±—ã–ª –ø–µ—Ä–µ—Ö–æ–¥
          commit_date=$(git show -s --format=%ci ${{ env.owr_commit }} 2>/dev/null || echo "unknown")
          echo "  üìÖ –î–∞—Ç–∞ –∫–æ–º–º–∏—Ç–∞: $commit_date"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ APK —É—Ç–∏–ª–∏—Ç –≤ —Å–∏—Å—Ç–µ–º–µ —Å–±–æ—Ä–∫–∏
          echo "üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –≤ —Å–±–æ—Ä–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ:"
          which apk 2>/dev/null && echo "  ‚úÖ APK –¥–æ—Å—Ç—É–ø–µ–Ω" || echo "  ‚ùå APK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
          which opkg 2>/dev/null && echo "  ‚úÖ OPKG –¥–æ—Å—Ç—É–ø–µ–Ω" || echo "  ‚ùå OPKG –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
          
          echo "üéØ –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞–∫–µ—Ç–æ–≤: ${{ env.PACKAGE_EXT || 'ipk' }}"

      - name: Fix Package Versions for APK Compatibility
        run: |
          cd owrt
          echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å APK..."
          
          # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏–∏ –≤ Makefile –ø–∞–∫–µ—Ç–æ–≤ AWG
          for pkg_dir in package/awg/*/; do
            if [ -f "$pkg_dir/Makefile" ]; then
              pkg_name=$(basename "$pkg_dir")
              echo "  üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ $pkg_name..."
              
              # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
              current_version=$(grep "PKG_VERSION" "$pkg_dir/Makefile" | head -1 || echo "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
              current_release=$(grep "PKG_RELEASE" "$pkg_dir/Makefile" | head -1 || echo "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
              echo "    üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $current_version"
              echo "    üìã –¢–µ–∫—É—â–∏–π —Ä–µ–ª–∏–∑: $current_release"
              
              # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
              cp "$pkg_dir/Makefile" "$pkg_dir/Makefile.backup"
              
              # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–µ—Ä—Å–∏–π –¥–ª—è APK
              # –£–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –∏ —Å—É—Ñ—Ñ–∏–∫—Å—ã –∏–∑ PKG_VERSION
              sed -i 's/PKG_VERSION:=\([0-9]\+\.[0-9]\+\.[0-9]\+\)-.*$/PKG_VERSION:=\1/' "$pkg_dir/Makefile"
              # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'r' –∏–∑ PKG_RELEASE
              sed -i 's/PKG_RELEASE:=r\([0-9]\+\)$/PKG_RELEASE:=\1/' "$pkg_dir/Makefile"
              # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Ç–∏–ø–∞ "0.0.1-1"
              sed -i 's/PKG_VERSION:=\([0-9]\+\.[0-9]\+\.[0-9]\+\)-\([0-9]\+\)$/PKG_VERSION:=\1\nPKG_RELEASE:=\2/' "$pkg_dir/Makefile"
              
              # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –ø—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
              if ! grep -q "PKG_VERSION:=" "$pkg_dir/Makefile"; then
                echo "PKG_VERSION:=1.0.0" >> "$pkg_dir/Makefile"
              fi
              if ! grep -q "PKG_RELEASE:=" "$pkg_dir/Makefile"; then
                echo "PKG_RELEASE:=1" >> "$pkg_dir/Makefile"
              fi
              
              # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
              new_version=$(grep "PKG_VERSION" "$pkg_dir/Makefile" | head -1 || echo "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
              new_release=$(grep "PKG_RELEASE" "$pkg_dir/Makefile" | head -1 || echo "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
              echo "    ‚úÖ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: $new_version"
              echo "    ‚úÖ –ù–æ–≤—ã–π —Ä–µ–ª–∏–∑: $new_release"
              
              # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
              if ! diff -q "$pkg_dir/Makefile.backup" "$pkg_dir/Makefile" >/dev/null 2>&1; then
                echo "    üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã –≤ Makefile"
              else
                echo "    ‚ö™ –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–∏—Å—å"
              fi
            fi
          done

      - name: Verify OpenWRT Configuration
        run: |
          cd owrt
          echo "=== üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ==="
          
          echo "üîç AmneziaWG –∑–∞–ø–∏—Å–∏ –≤ .config:"
          grep -E "(amneziawg|awg)" .config || echo "‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π amneziawg –≤ .config"
          
          echo "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –≤ package/awg/:"
          for pkg in package/awg/*/; do
            if [ -d "$pkg" ]; then
              pkgname=$(basename "$pkg")
              echo "  üìÅ $pkgname"
              if [ -f "$pkg/Makefile" ]; then
                echo "    ‚úÖ Makefile –Ω–∞–π–¥–µ–Ω"
                grep -E "^PKG_NAME|^PKG_VERSION|^PKG_RELEASE" "$pkg/Makefile" | sed 's/^/    /'
              else
                echo "    ‚ùå Makefile –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
              fi
            fi
          done
          
          echo "üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:"
          grep -E "CONFIG_TARGET_" .config | head -5
          
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π —Å –ø–∞–∫–µ—Ç–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:"
          for pkg in package/awg/*/; do
            [ -f "$pkg/Makefile" ] || continue
            pkg_name=$(basename "$pkg")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏ —Ä–µ–ª–∏–∑
            version=$(grep "PKG_VERSION" "$pkg/Makefile" | cut -d'=' -f2 | tr -d ' ' || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            release=$(grep "PKG_RELEASE" "$pkg/Makefile" | cut -d'=' -f2 | tr -d ' ' || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            echo "  üì¶ $pkg_name: –≤–µ—Ä—Å–∏—è '$version', —Ä–µ–ª–∏–∑ '$release'"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ –¥–ª—è APK
            if [ "${PACKAGE_EXT}" = "apk" ]; then
              if echo "$version" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
                echo "    ‚úÖ –§–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å APK"
              else
                echo "    ‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ –¥–ª—è APK: '$version'"
              fi
              
              if echo "$release" | grep -qE '^[0-9]+$'; then
                echo "    ‚úÖ –§–æ—Ä–º–∞—Ç —Ä–µ–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å APK"
              else
                echo "    ‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–ª–∏–∑–∞ –¥–ª—è APK: '$release'"
              fi
            else
              echo "    ‚ÑπÔ∏è IPK —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–π –ø—Ä–æ–ø—É—â–µ–Ω—ã"
            fi
          done

      - name: Build Kernel/Toolchain
        run: |
          cd owrt
          echo "üî® Building tools..."
          make tools/install -j$(nproc) V=s
          
          echo "üî® Building toolchain..."
          make toolchain/install -j$(nproc) V=s
          
          echo "üî® Building kernel..."
          make target/linux/{clean,compile} -i -j$(nproc) V=s

      - name: Build Packages with Enhanced Logging
        run: |
          cd owrt
          echo "=== üî® –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ ==="
          
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
          mkdir -p build_logs
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
          echo "üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã AWG:"
          for pkg in package/awg/*/; do
            [ -d "$pkg" ] || continue
            pkgname=$(basename "$pkg")
            echo "  - $pkgname"
            ls -la "$pkg" | head -3
          done
          
          # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è APK —Å–±–æ—Ä–∫–∏
          if [ "${PACKAGE_EXT}" = "apk" ]; then
            echo ""
            echo "üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è APK —Å–±–æ—Ä–∫–∏:"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ apk —É—Ç–∏–ª–∏—Ç
            if ! command -v apk >/dev/null 2>&1; then
              echo "  ‚ö†Ô∏è APK —É—Ç–∏–ª–∏—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ PATH"
              echo "  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º staging_dir:"
              find staging_dir -name "*apk*" -type f 2>/dev/null | head -5 || echo "  APK —É—Ç–∏–ª–∏—Ç—ã –≤ staging_dir –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            else
              echo "  ‚úÖ APK —É—Ç–∏–ª–∏—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã"
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ staging_dir
            if [ -d "staging_dir/host/bin" ]; then
              echo "  üìÅ staging_dir/host/bin –¥–æ—Å—Ç—É–ø–µ–Ω"
              ls -la staging_dir/host/bin/ | grep -E "(apk|fakeroot)" || echo "  APK/fakeroot —É—Ç–∏–ª–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            fi
          fi
          
          # –°–æ–±–∏—Ä–∞–µ–º —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          success=0; total=0; failed_packages=()
          
          for pkg in package/awg/*/; do
            [ -f "$pkg/Makefile" ] || continue
            pkgname=$(basename "$pkg")
            echo ""
            echo "üîß [$((total+1))] –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞: $pkgname"
            echo "=================="
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–∫–µ—Ç–∞
            version=$(grep "PKG_VERSION" "$pkg/Makefile" | cut -d'=' -f2 | tr -d ' ' || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            release=$(grep "PKG_RELEASE" "$pkg/Makefile" | cut -d'=' -f2 | tr -d ' ' || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            echo "  üìã –í–µ—Ä—Å–∏—è: $version, –†–µ–ª–∏–∑: $release, –§–æ—Ä–º–∞—Ç: ${PACKAGE_EXT}"
            
            # –û—á–∏—Å—Ç–∫–∞
            echo "  üßπ –û—á–∏—Å—Ç–∫–∞..."
            make package/awg/$pkgname/clean V=s &> "build_logs/${pkgname}_clean.log"
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
            echo "  üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤..."
            if make package/awg/$pkgname/download V=s &> "build_logs/${pkgname}_download.log"; then
              echo "    ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞"
            else
              echo "    ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤)"
            fi
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
            echo "  üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞..."
            if make package/awg/$pkgname/prepare V=s &> "build_logs/${pkgname}_prepare.log"; then
              echo "    ‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞"
            else
              echo "    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"
              echo "    üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:"
              tail -10 "build_logs/${pkgname}_prepare.log" | sed 's/^/      /'
              failed_packages+=("$pkgname (prepare)")
              total=$((total+1))
              continue
            fi
            
            # –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            timeout_duration=1800
            if [ "$pkgname" = "luci-proto-amneziawg" ]; then
              timeout_duration=2400  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
            fi
            
            echo "  ‚öôÔ∏è –ö–æ–º–ø–∏–ª—è—Ü–∏—è (—Ç–∞–π–º–∞—É—Ç: ${timeout_duration}s)..."
            if timeout $timeout_duration make package/awg/$pkgname/compile V=s &> "build_logs/${pkgname}_compile.log"; then
              echo "    ‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: $pkgname"
              success=$((success+1))
              
              # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
              echo "  üîç –ü–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–±–æ—Ä–∫–∏:"
              recent_packages=$(find . \( -name "*${pkgname}*.ipk" -o -name "*${pkgname}*.apk" \) -newer "build_logs/${pkgname}_compile.log" 2>/dev/null || true)
              if [ -n "$recent_packages" ]; then
                echo "$recent_packages" | while read -r pkg_file; do
                  size=$(stat -c%s "$pkg_file" 2>/dev/null || echo "unknown")
                  pkg_ext="${pkg_file##*.}"
                  echo "    üì¶ $(basename "$pkg_file") [${pkg_ext}] (${size} bytes)"
                done
              else
                echo "    ‚ö†Ô∏è –ü–∞–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏"
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                echo "    üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫:"
                find bin -name "*$pkgname*" 2>/dev/null | head -3 | sed 's/^/      /' || echo "      –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ bin/"
              fi
            else
              echo "    ‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: $pkgname"
              failed_packages+=("$pkgname (compile)")
              echo "    üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ –æ—à–∏–±–∫–∏:"
              tail -20 "build_logs/${pkgname}_compile.log" | sed 's/^/      /'
              
              # –î–ª—è APK –ø–∞–∫–µ—Ç–æ–≤ –≤—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
              if [ "${PACKAGE_EXT}" = "apk" ] && grep -q "package version is invalid" "build_logs/${pkgname}_compile.log"; then
                echo "    ü©∫ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ APK –≤–µ—Ä—Å–∏–∏:"
                echo "      üìã –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –≤–µ—Ä—Å–∏–∏ –¥–ª—è APK"
                echo "      üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $version"
                echo "      üìã –¢–µ–∫—É—â–∏–π —Ä–µ–ª–∏–∑: $release"
                echo "      üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–µ—Ä—Å–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ X.Y.Z –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"
              fi
            fi
            total=$((total+1))
          done
          
          echo ""
          echo "üìä ============ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ë–û–†–ö–ò ============"
          echo "‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ: $success –∏–∑ $total –ø–∞–∫–µ—Ç–æ–≤"
          
          if [ ${#failed_packages[@]} -gt 0 ]; then
            echo "‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:"
            for failed in "${failed_packages[@]}"; do
              echo "  - $failed"
            done
          fi
          
          # –§–∏–Ω–∞–ª—å–Ω—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
          echo ""
          echo "üîç –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:"
          all_packages=$(find . \( -name "*.ipk" -o -name "*.apk" \) -type f 2>/dev/null | head -20)
          if [ -n "$all_packages" ]; then
            echo "$all_packages" | while read -r pkg_file; do
              size=$(stat -c%s "$pkg_file" 2>/dev/null || echo "unknown")
              pkg_ext="${pkg_file##*.}"
              echo "  üì¶ $pkg_file [${pkg_ext}] (${size} bytes)"
            done
          else
            echo "  ‚ùå –í–æ–æ–±—â–µ –Ω–∏–∫–∞–∫–∏—Ö –ø–∞–∫–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–∞–∫–µ—Ç
          if [ "$success" -eq 0 ]; then
            echo ""
            echo "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–∏ –æ–¥–∏–Ω –ø–∞–∫–µ—Ç –Ω–µ –±—ã–ª —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
            echo "üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
            find . -maxdepth 3 -type d -name "*amnezia*" -o -name "*awg*" 2>/dev/null || true
            echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞–∫–µ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:"
            echo "  üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${PACKAGE_EXT:-ipk}"
            find . -name "*.${PACKAGE_EXT:-ipk}" 2>/dev/null | head -5 || echo "  ‚ùå –ü–∞–∫–µ—Ç—ã –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            exit 1
          else
            echo ""
            echo "‚úÖ –°–±–æ—Ä–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ–π: —Å–æ–±—Ä–∞–Ω–æ $success –ø–∞–∫–µ—Ç–æ–≤"
          fi

      - name: Advanced Package Collection
        shell: bash
        run: |
          set -e
          cd owrt
          
          echo "=== üéØ –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –ü–ê–ö–ï–¢–û–í ==="
          mkdir -p ../artifacts
          
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
          expected_format="${PACKAGE_EXT:-ipk}"
          echo "üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞–∫–µ—Ç–æ–≤: .$expected_format"
          
          # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞
          if [ "$expected_format" = "apk" ]; then
            declare -a search_strategies=(
              "find . -name '*amneziawg*.apk'"
              "find . -name '*awg*.apk'"
              "find . -name 'kmod-*wg*.apk'"
              "find . -name 'luci-*amnezia*.apk'"
              "find . -name 'luci-proto-*wg*.apk'"
              # Fallback –∫ IPK –Ω–∞ —Å–ª—É—á–∞–π —Å–º–µ—à–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
              "find . -name '*amneziawg*.ipk'"
              "find . -name '*awg*.ipk'"
            )
          else
            declare -a search_strategies=(
              "find . -name '*amneziawg*.ipk'"
              "find . -name '*awg*.ipk'"
              "find . -name 'kmod-*wg*.ipk'"
              "find . -name 'luci-*amnezia*.ipk'"
              "find . -name 'luci-proto-*wg*.ipk'"
              # Fallback –∫ APK –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
              "find . -name '*amneziawg*.apk'"
              "find . -name '*awg*.apk'"
            )
          fi
          
          declare -a search_locations=(
            "bin/targets"
            "bin/packages"
            "staging_dir"
            "build_dir"
            "."
          )
          
          copied=0
          
          echo "üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –∏–º–µ–Ω"
          for strategy in "${search_strategies[@]}"; do
            echo "  üîé –í—ã–ø–æ–ª–Ω—è–µ–º: $strategy"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ find
            temp_results=$(mktemp)
            eval "$strategy" 2>/dev/null | head -10 > "$temp_results" || true
            
            if [ -s "$temp_results" ]; then
              while IFS= read -r file; do
                if [ -f "$file" ] && [ ! -f "../artifacts/$(basename "$file")" ]; then
                  if cp "$file" ../artifacts/ 2>/dev/null; then
                    size=$(stat -c%s "$file" 2>/dev/null || echo "unknown")
                    echo "    ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: $(basename "$file") (${size} bytes)"
                    copied=$((copied+1))
                  else
                    echo "    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å: $(basename "$file")"
                  fi
                fi
              done < "$temp_results"
            fi
            rm -f "$temp_results"
          done
          
          echo ""
          echo "üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ª–æ–∫–∞—Ü–∏—è—Ö"
          for location in "${search_locations[@]}"; do
            if [ -d "$location" ]; then
              echo "  üìÅ –°–∫–∞–Ω–∏—Ä—É–µ–º: $location"
              # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
              temp_location_files=$(mktemp)
              find "$location" -maxdepth 4 \( -name "*.ipk" -o -name "*.apk" \) 2>/dev/null | grep -iE "(amnezia|awg)" | head -5 > "$temp_location_files" || true
              
              if [ -s "$temp_location_files" ]; then
                while IFS= read -r file; do
                  if [ -f "$file" ] && [ ! -f "../artifacts/$(basename "$file")" ]; then
                    if cp "$file" ../artifacts/ 2>/dev/null; then
                      size=$(stat -c%s "$file" 2>/dev/null || echo "unknown")
                      echo "    ‚úÖ –ò–∑ $location: $(basename "$file") (${size} bytes)"
                      copied=$((copied+1))
                    else
                      echo "    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ $location: $(basename "$file")"
                    fi
                  fi
                done < "$temp_location_files"
              else
                echo "    ‚ö™ –í $location –ø–∞–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
              fi
              rm -f "$temp_location_files"
            else
              echo "  ‚ö™ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $location –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            fi
          done
          
          echo ""
          echo "üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞)"
          temp_recent_files=$(mktemp)
          find . \( -name "*.ipk" -o -name "*.apk" \) -type f -mmin -120 2>/dev/null | grep -iE "(amnezia|awg)" | head -10 > "$temp_recent_files" || true
          
          if [ -s "$temp_recent_files" ]; then
            echo "  üìÖ –ù–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã:"
            while IFS= read -r file; do
              if [ ! -f "../artifacts/$(basename "$file")" ]; then
                if cp "$file" ../artifacts/ 2>/dev/null; then
                  size=$(stat -c%s "$file" 2>/dev/null || echo "unknown")
                  echo "    ‚úÖ –ù–µ–¥–∞–≤–Ω–∏–π: $(basename "$file") (${size} bytes)"
                  copied=$((copied+1))
                else
                  echo "    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–π —Ñ–∞–π–ª: $(basename "$file")"
                fi
              fi
            done < "$temp_recent_files"
          else
            echo "  ‚ö™ –ù–µ–¥–∞–≤–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
          fi
          rm -f "$temp_recent_files"
          
          echo ""
          echo "üìä ============ –†–ï–ó–£–õ–¨–¢–ê–¢ –°–ë–û–†–ê ============"
          
          if [ -d "../artifacts" ] && [ "$(ls -A ../artifacts 2>/dev/null)" ]; then
            echo "‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:"
            for artifact in ../artifacts/*; do
              if [ -f "$artifact" ]; then
                size=$(stat -c%s "$artifact" 2>/dev/null || echo "unknown")
                file_type=$(file -b "$artifact" 2>/dev/null || echo "unknown")
                pkg_ext="${artifact##*.}"
                echo "  üì¶ $(basename "$artifact") [${pkg_ext}]"
                echo "    üìè –†–∞–∑–º–µ—Ä: ${size} bytes"
                echo "    üîç –¢–∏–ø: ${file_type}"
              fi
            done
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
            final_count=$(ls -1 ../artifacts 2>/dev/null | wc -l)
            echo ""
            echo "‚úÖ –û–±—â–∏–π –∏—Ç–æ–≥: —Å–æ–±—Ä–∞–Ω–æ $final_count –ø–∞–∫–µ—Ç–æ–≤"
          else
            echo "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞!"
            echo ""
            echo "ü©∫ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:"
            echo "üìã –í—Å–µ –ø–∞–∫–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–∏—Å—Ç–µ–º–µ —Å–±–æ—Ä–∫–∏:"
            find . \( -name "*.ipk" -o -name "*.apk" \) -type f -exec ls -lh {} \; 2>/dev/null | head -20 || echo "–ù–µ—Ç –ø–∞–∫–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
            echo ""
            echo "üìã –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: .$expected_format"
            echo "üìã –§–∞–π–ª—ã –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:"
            find . -name "*.$expected_format" -type f 2>/dev/null | head -10 || echo "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .$expected_format"
            echo ""
            echo "üìã –§–∞–π–ª—ã —Å 'amnezia' –∏–ª–∏ 'awg' –≤ –∏–º–µ–Ω–∏:"
            find . -type f \( -name "*amnezia*" -o -name "*awg*" \) 2>/dev/null | head -20 || echo "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏"
            echo ""
            echo "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞–∂–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:"
            for dir in bin staging_dir build_dir; do
              if [ -d "$dir" ]; then
                echo "  üìÅ $dir (–ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤):"
                find "$dir" -type f 2>/dev/null | head -10 | sed 's/^/    /' || true
              fi
            done
            exit 1
          fi

      - name: Extract kernel info
        id: kinfo
        run: |
          cd owrt
          echo "üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —è–¥—Ä–µ..."
          
          # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ .vermagic —Ñ–∞–π–ª–∞
          vermagic_file=""
          for i in {1..30}; do
            vermagic_file=$(find build_dir/target-*/linux-*/linux-*/.vermagic 2>/dev/null | head -n1)
            [ -f "$vermagic_file" ] && break
            vermagic_file=$(find . -name ".vermagic" 2>/dev/null | head -n1)
            [ -f "$vermagic_file" ] && break
            echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è .vermagic —Ñ–∞–π–ª–∞... (–ø–æ–ø—ã—Ç–∫–∞ $i)"
            sleep 2
          done
          
          if [ -f "$vermagic_file" ]; then
            vermagic=$(cat "$vermagic_file")
            echo "vermagic=$vermagic" >> "$GITHUB_OUTPUT"
            echo "‚úÖ VERMAGIC –Ω–∞–π–¥–µ–Ω: $vermagic"
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ —è–¥—Ä–∞
            kdir=$(dirname "$vermagic_file")
            if [ -d "$kdir" ]; then
              kv=$(make -s -C "$kdir" kernelversion 2>/dev/null || echo "unknown")
              echo "kernel_version=$kv" >> "$GITHUB_OUTPUT"
              echo "‚úÖ –í–µ—Ä—Å–∏—è —è–¥—Ä–∞: $kv"
            else
              echo "kernel_version=unknown" >> "$GITHUB_OUTPUT"
              echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é —è–¥—Ä–∞"
            fi
          else
            echo "‚ùå .vermagic —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            echo "üîç –ü–æ–∏—Å–∫ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö:"
            find . -name "*vermagic*" 2>/dev/null | head -10 || echo "–§–∞–π–ª—ã vermagic –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            echo "vermagic=unknown" >> "$GITHUB_OUTPUT"
            echo "kernel_version=unknown" >> "$GITHUB_OUTPUT"
          fi

      - name: Create release notes
        run: |
          echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ release notes..."
          
          cat > release_notes.md <<EOF
          # üöÄ AmneziaWG GL.iNet v${{ env.gl_version }}
          
          –°–æ–±—Ä–∞–Ω–æ –∏–∑ OpenWRT ${{ env.owr_branch }} (commit ${{ env.owr_commit }})
          
          ## üîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —è–¥—Ä–µ
          - **–í–µ—Ä—Å–∏—è**: \`${{ steps.kinfo.outputs.kernel_version }}\`
          - **VERMAGIC**: \`${{ steps.kinfo.outputs.vermagic }}\`
          
          ## üì¶ –ü–∞–∫–µ—Ç—ã –≤ —Ä–µ–ª–∏–∑–µ:
          EOF
          
          if [ -d "artifacts" ] && [ "$(ls -A artifacts 2>/dev/null)" ]; then
            for f in artifacts/*; do
              if [ -f "$f" ]; then
                size=$(stat -c%s "$f" 2>/dev/null || echo "unknown")
                size_mb=$(echo "scale=2; $size/1024/1024" | bc -l 2>/dev/null || echo "unknown")
                pkg_ext="${f##*.}"
                echo "- üì¶ \`$(basename "$f")\` [**${pkg_ext}**] (**${size_mb} MB** / ${size} bytes)"
              fi
            done >> release_notes.md
          else
            echo "- ‚ùå **–ü–∞–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**" >> release_notes.md
          fi
          
          cat >> release_notes.md <<EOF
          
          ## üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          - **–¶–µ–ª–µ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞**: GL.iNet ${{ env.gl_version }}
          - **–§–æ—Ä–º–∞—Ç –ø–∞–∫–µ—Ç–æ–≤**: ${{ env.PACKAGE_EXT || 'ipk' }}
          - **–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **OpenWRT –≤–µ—Ç–∫–∞**: ${{ env.owr_branch }}
          - **OpenWRT commit**: ${{ env.owr_commit }}
          
          ## üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞
          \`\`\`bash
          # –î–ª—è IPK –ø–∞–∫–µ—Ç–æ–≤ (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±):
          opkg install kmod-amneziawg_*.ipk
          opkg install amneziawg-tools_*.ipk
          opkg install luci-proto-amneziawg_*.ipk
          
          # –î–ª—è APK –ø–∞–∫–µ—Ç–æ–≤ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç):
          apk add kmod-amneziawg_*.apk
          apk add amneziawg-tools_*.apk
          apk add luci-proto-amneziawg_*.apk
          \`\`\`
          EOF
          
          echo "üìÑ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä release notes:"
          cat release_notes.md

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: amneziawg-packages-${{ env.gl_version }}-${{ github.run_number }}
          path: |
            artifacts/*.ipk
            artifacts/*.apk
            owrt/build_logs/*.log
          retention-days: 30

      - name: Auto-publish release
        if: startsWith(github.ref, 'refs/tags/') && (hashFiles('artifacts/*.ipk') != '' || hashFiles('artifacts/*.apk') != '')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*.ipk
            artifacts/*.apk
          body_path: release_notes.md
          fail_on_unmatched_files: false
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "üßπ –°–±–æ—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ..."
          cd owrt
          
          echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏:"
          if [ -d "build_logs" ]; then
            for log in build_logs/*.log; do
              if [ -f "$log" ]; then
                echo "=== $(basename "$log") ==="
                tail -20 "$log"
                echo ""
              fi
            done
          fi
          
          echo "üìã –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:"
          df -h
          
          echo "üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:"
          free -h
          
          echo "üìã –ü—Ä–æ—Ü–µ—Å—Å—ã —Å–±–æ—Ä–∫–∏:"
          ps aux | grep -E "(make|gcc|ld)" | head -10 || true

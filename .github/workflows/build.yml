name: Build & Publish AmneziaWG Packages

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      gl_version:
        description: 'GL.iNet version AmneziaWG'
        required: false
        type: string
      force_rebuild:
        description: 'Force rebuild even if packages exist'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

env:
  owr_branch: "openwrt-24.10"
  owr_commit: "a878dd24e7"
  gl_version: ${{ inputs.gl_version || 'MT6000_4.8.0' }}
  gl_vermagic: "9469a6c8c449c47e503c05678ea1559d"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout Configs
        uses: actions/checkout@v4
        with:
          path: gl

      - name: Checkout AmneziaWG Source
        uses: actions/checkout@v4
        with:
          path: awg
          repository: amnezia-vpn/amneziawg-openwrt

      - name: Checkout OpenWRT
        uses: actions/checkout@v4
        with:
          path: owrt
          repository: openwrt/openwrt
          ref: ${{ env.owr_branch }}
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev gawk git subversion \
            libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools \
            python3-yaml

      - name: Validate Config File
        run: |
          CONFIG_FILE="gl/config_${{ env.gl_version }}.buildinfo"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ Missing config: $CONFIG_FILE"
            ls -la gl/
            exit 1
          fi
          echo "✅ Using config: $CONFIG_FILE"

      - name: Prepare OpenWRT
        run: |
          cd owrt
          git reset --hard ${{ env.owr_commit }}
          mkdir -p package/awg
          echo "📦 Copying AWG packages..."
          cp -a ../awg/{kmod-amneziawg,amneziawg-tools,luci-proto-amneziawg} package/awg/

          ./scripts/feeds update -a
          ./scripts/feeds install -a

          cp ../gl/config_${{ env.gl_version }}.buildinfo .config
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-amneziawg=m
          CONFIG_PACKAGE_amneziawg-tools=y
          CONFIG_PACKAGE_luci-proto-amneziawg=y
          EOF
          make defconfig
          echo "🔍 Checking .config..."
          grep -E 'amneziawg' .config || { echo "❌ .config missing amneziawg entries"; exit 1; }

          sed -i.bak '/\.vermagic/c\	echo "${{ env.gl_vermagic }}" > $(LINUX_DIR)/.vermagic' ./include/kernel-defaults.mk

      - name: Build Kernel/Toolchain
        run: |
          cd owrt
          make tools/install -j$(nproc)
          make toolchain/install -j$(nproc)
          make target/linux/{clean,compile} -i -j$(nproc) V=s

      - name: Build Packages
        run: |
          cd owrt
          success=0; total=0
          for pkg in package/awg/*/; do
            [ -f "$pkg/Makefile" ] || continue
            pkgname=$(basename "$pkg")
            echo "🔧 Building $pkgname"
            make package/awg/$pkgname/{clean,download,prepare} V=s || true
            if make package/awg/$pkgname/compile V=s; then
              echo "✅ Built $pkgname"; success=$((success+1))
            else
              echo "❌ Failed $pkgname"
            fi
            total=$((total+1))
          done
          echo "✅ $success / $total built."
          [ "$success" -gt 0 ] || exit 1

      - name: Collect IPK Artifacts
        shell: bash
        run: |
          set -e
          cd owrt
          mkdir -p ../artifacts

          declare -a patterns=("kmod-amneziawg" "amneziawg-tools" "luci-proto-amneziawg")
          copied=0

          for pattern in "${patterns[@]}"; do
            matches=$(find bin/ -type f -name "${pattern}*.ipk")
            if [[ -n "$matches" ]]; then
              echo "$matches" | while IFS= read -r file; do
                cp "$file" ../artifacts/
                echo "✅ Copied $(basename "$file")"
                copied=$((copied+1))
              done
            else
              echo "⚠️ No .ipk found for pattern: $pattern"
            fi
          done

          if [[ "$copied" -eq 0 ]]; then
            echo "❌ No .ipk found in total"
            find bin/ -type f -name "*.ipk"
            exit 1
          fi

          echo "✅ Collected $copied packages"

      - name: Extract kernel info
        id: kinfo
        run: |
          cd owrt
          for i in {1..30}; do
            file=$(find build_dir/target-*/linux-*/linux-*/.vermagic 2>/dev/null | head -n1)
            [ -f "$file" ] && break
            echo "Waiting .vermagic... ($i)"
            sleep 2
          done
          [ -f "$file" ] || { echo "❌ .vermagic not found"; find build_dir/ -name .vermagic; exit 1; }
          vermagic=$(cat "$file"); echo "vermagic=$vermagic" >> "$GITHUB_OUTPUT"
          kdir=$(dirname "$file")
          kv=$(make -s -C "$kdir" kernelversion 2>/dev/null || echo unknown)
          echo "kernel_version=$kv" >> "$GITHUB_OUTPUT"
          echo "✅ Kernel: $kv, VERMAGIC: $vermagic"

      - name: Create release notes
        run: |
          cat > release_notes.md <<EOF
          # AmneziaWG GL.iNet v${{ env.gl_version }}

          Built from OpenWRT ${{ env.owr_branch }} (commit ${{ env.owr_commit }})

          ## Kernel Info
          - Version: ${{ steps.kinfo.outputs.kernel_version }}
          - VERMAGIC: ${{ steps.kinfo.outputs.vermagic }}

          ## Packages:
          EOF
          for f in artifacts/*.ipk; do
            size=$(stat -c%s "$f" || echo unknown)
            echo "- \`$(basename "$f")\` ($size bytes)"
          done >> release_notes.md
          cat release_notes.md

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: amneziawg-packages-${{ env.gl_version }}
          path: artifacts/*.ipk

      - name: Auto-publish release
        if: startsWith(github.ref, 'refs/tags/') && hashFiles('artifacts/*.ipk') != ''
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*.ipk
          body_path: release_notes.md
          fail_on_unmatched_files: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
